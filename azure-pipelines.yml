trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  test.projects: '**/*Tests/*.csproj'
  all.projects: '**/*.csproj'
  syncService.project: '**/*Local.SyncService.csproj'  
  syncService.output: '$(Build.BinariesDirectory)/SyncService'

stages:
- stage: build
  displayName: 'Build Projects'
  variables:
    - group: appSettings
  jobs:
  - job: prepare
    displayName: 'Prepare Build'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        includePreviewVersions: false
    - task: DotNetCoreCLI@2
      displayName: 'Restore all'
      inputs:
        command: 'restore'
        projects: $(all.projects)
    - task: DotNetCoreCLI@2
      displayName: 'Build Sync Service'
      inputs:
        command: 'build'
        projects: $(syncService.project)
        arguments: '--no-restore --configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish Sync Service Project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: $(syncService.project)
        arguments: '--no-build -c "Release" -r win-x64 --self-contained true -o ${syncService.output}'
        zipAfterPublish: false
    - task: FileTransform@2
      displayName: 'Transform Sync Service App Settings'
      inputs:
        xmlTransformationRules: ''
        folderPath: '${syncService.output}/Cadenza.Local.SyncService'
        jsonTargetFiles: 'appsettings.json'
    - publish: ${syncService.output}
      displayName: 'Publish Artifacts'
      artifact: 'drop'
        
- stage: test
  displayName: 'Test All'
  jobs:
  - job: test
    displayName: 'Test'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: $(test.projects)
        arguments: '--configuration $(buildConfiguration)'

- stage: archive
  displayName: 'Archive Artifacts'
  variables:
  - group: syncServiceAccount
  - name: syncService.name
    value: 'CadenzaSyncService'
  - name: syncService.displayName
    value: 'Cadenza Sync Service'
  - name: syncService.description
    value: 'Description to do'
  jobs:
  - job: archiveSyncService
    displayName: 'Archive Sync Service'
    steps:
    - download: current
      displayName: 'Download artifacts'
      artifact: drop
    - task: PowerShell@2
      displayName: 'Create Sync Service Install File'
      env:
        SERVICEACCOUNT: $(username)
        SERVICEPASSWORD: $(password)
      inputs:
        targetType: 'inline'
        script: |
          Set-Content "$(Pipeline.Workspace)/drop/Cadenza.Local.SyncService/installService.ps1" @"
          sc.exe create `"$(syncService.name)`" start= delayed-auto binpath= `"`$(Get-Location)\Cadenza.Local.SyncService.exe`" displayname= `"$(syncService.displayName)`" obj= `"$Env:SERVICEACCOUNT`" password= `"$Env:SERVICEPASSWORD`"
          sc.exe description `"$(syncService.name)`" `"$(syncService.description)`"
          "@
    - task: PowerShell@2
      displayName: 'Create Sync Service Uninstall File'
      inputs:
        targetType: 'inline'
        script: |
          Set-Content "$(Pipeline.Workspace)/drop/Cadenza.Local.SyncService/uninstallService.ps1" @"
          sc.exe delete `"$(syncService.name)`"
          "@
    - task: ArchiveFiles@2
      displayName: 'Archive Service Deployment Files'
      inputs:
        rootFolderOrFile: '$(Pipeline.Workspace)/drop/Cadenza.Local.SyncService' 
        includeRootFolder: false 
        archiveFile: '$(Pipeline.Workspace)/drop/Cadenza.Local.SyncService-$(Build.BuildId).zip' 
    - publish: '$(Pipeline.Workspace)/drop/Cadenza.Local.SyncService-$(Build.BuildId).zip'
      displayName: 'Publish Service Deployment Files'
      artifact: 'Local Sync Service Deployment Files'

- stage: github
  displayName: 'Push to GitHub'
  variables:
  - group: github
  jobs:
  - job: export
    displayName: 'Push to GitHub'
    steps:
    - task: CmdLine@1
      displayName: 'Set git user email'
      inputs:
        filename: git
        arguments: 'config --global user.email "$(github.email)"'
    - task: CmdLine@1
      displayName: 'Set git user name'
      inputs:
        filename: git
        arguments: 'config --global user.name "$(github.user)"'
    - task: CmdLine@1
      displayName: 'Pull from GitHub'
      inputs:
        filename: git
        arguments: 'pull $(github.repository.url) $(github.branch)'
    - task: CmdLine@1
      displayName: 'Pull Tags from GitHub'
      inputs:
        filename: git
        arguments: 'pull --tags $(github.repository.url.credentials)'
    - task: CmdLine@1
      displayName: 'Push to GitHub'
      inputs:
        filename: git
        arguments: 'push $(github.repository.url.credentials) head:$(github.branch)'
    - task: CmdLine@1
      displayName: 'Push Tags to GitHub'
      inputs:
        filename: git
        arguments: 'push --tags $(github.repository.url.credentials)'