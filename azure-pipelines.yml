# trigger:
# - main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  test.projects: '**/*Tests/*.csproj'
  all.projects: '**/*.csproj'
  syncService.project: '**/*Local.SyncService.csproj'  
  syncService.output: '$(Build.BinariesDirectory)/SyncService'
  localApi.project: '**/*Local.API.csproj'
  localApi.output: '$(Build.BinariesDirectory)/LocalAPI'

stages:
- stage: build
  displayName: 'Build'
  variables:
    - group: appSettings
    
  jobs:
  - job: buildSyncService
    displayName: 'Build Sync Service'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: $(all.projects)
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: $(syncService.project)
        arguments: '--no-restore --configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: $(syncService.project)
        arguments: '--no-build -c "Release" -r win-x64 --self-contained true -o ${syncService.output}'
        zipAfterPublish: false
    - task: FileTransform@2
      displayName: 'Transform App Settings'
      inputs:
        xmlTransformationRules: ''
        folderPath: '${syncService.output}/Cadenza.Local.SyncService'
        jsonTargetFiles: 'appsettings.json'
    - publish: ${syncService.output}
      displayName: 'Publish Artifact'
      artifact: 'drop-syncService'
      
  - job: buildLocalApi
    displayName: 'Build Local API'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        includePreviewVersions: false
    - task: DotNetCoreCLI@2
      displayName: 'Restore all'
      inputs:
        command: 'restore'
        projects: $(all.projects)
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: $(localApi.project)
        arguments: '--no-restore --configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        projects: $(localApi.project)
        arguments: '--no-build -c "Release" -r win-x64 --self-contained true -o ${localApi.output}'
        zipAfterPublish: false
    - task: FileTransform@2
      displayName: 'Transform App Settings'
      inputs:
        xmlTransformationRules: ''
        folderPath: '${localApi.output}/Cadenza.Local.API'
        jsonTargetFiles: 'appsettings.json'
    - publish: ${localApi.output}
      displayName: 'Publish Local API'
      artifact: 'drop-localApi'
    
- stage: test
  displayName: 'Test'
  jobs:
  - job: test
    displayName: 'Test'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: $(test.projects)
        arguments: '--configuration $(buildConfiguration)'

- stage: publish
  displayName: 'Publish'
  variables:
    syncService.name: 'CadenzaSyncService'
    syncService.displayName: 'Cadenza Sync Service'
  jobs:
  - job: publishSyncService
    displayName: 'Publish Sync Service'
    steps:
    - download: current
      displayName: 'Download Artifacts'
      artifact: drop-syncService
    - task: PowerShell@2
      displayName: 'Create Install File'
      inputs:
        targetType: 'inline'
        script: |
          Set-Content "$(Pipeline.Workspace)/drop-syncService/Cadenza.Local.SyncService/installService.ps1" @"
          sc.exe create `"$(syncService.name)`" start= delayed-auto binpath= `"`$(Get-Location)\Cadenza.Local.SyncService.exe`" displayname= `"$(syncService.displayName)`"
          "@
    - task: PowerShell@2
      displayName: 'Create Uninstall File'
      inputs:
        targetType: 'inline'
        script: |
          Set-Content "$(Pipeline.Workspace)/drop-syncService/Cadenza.Local.SyncService/uninstallService.ps1" @"
          sc.exe delete `"$(syncService.name)`"
          "@
    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(Pipeline.Workspace)/drop-syncService/Cadenza.Local.SyncService' 
        includeRootFolder: false 
        archiveFile: '$(Pipeline.Workspace)/drop-syncService/Cadenza.Local.SyncService-$(Build.BuildId).zip'
    - publish: '$(Pipeline.Workspace)/drop-syncService/Cadenza.Local.SyncService-$(Build.BuildId).zip'
      displayName: 'Publish Archive'
      artifact: 'Local Sync Service Deployment Files'
    
  - job: publishLocalApi
    displayName: 'Publish Local API'
    steps:
    - download: current
      displayName: 'Download Artifacts'
      artifact: drop-localApi
    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(Pipeline.Workspace)/drop-localApi/Cadenza.Local.API' 
        includeRootFolder: false 
        archiveFile: '$(Pipeline.Workspace)/drop-localApi/Cadenza.Local.API-$(Build.BuildId).zip'
    - publish: '$(Pipeline.Workspace)/drop-localApi/Cadenza.Local.API-$(Build.BuildId).zip'
      displayName: 'Publish Archive'
      artifact: 'Local API Deployment Files'

- stage: github
  displayName: 'GitHub'
  variables:
  - group: github
  jobs:
  - job: export
    displayName: 'Push to GitHub'
    steps:
    - task: CmdLine@1
      displayName: 'Set git user email'
      inputs:
        filename: git
        arguments: 'config --global user.email "$(github.email)"'
    - task: CmdLine@1
      displayName: 'Set git user name'
      inputs:
        filename: git
        arguments: 'config --global user.name "$(github.user)"'
    - task: CmdLine@1
      displayName: 'Pull from GitHub'
      inputs:
        filename: git
        arguments: 'pull $(github.repository.url) $(github.branch)'
    - task: CmdLine@1
      displayName: 'Pull Tags from GitHub'
      inputs:
        filename: git
        arguments: 'pull --tags $(github.repository.url.credentials)'
    - task: CmdLine@1
      displayName: 'Push to GitHub'
      inputs:
        filename: git
        arguments: 'push $(github.repository.url.credentials) head:$(github.branch)'
    - task: CmdLine@1
      displayName: 'Push Tags to GitHub'
      inputs:
        filename: git
        arguments: 'push --tags $(github.repository.url.credentials)'