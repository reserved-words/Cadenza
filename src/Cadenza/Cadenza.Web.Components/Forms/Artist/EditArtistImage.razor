
@inherits FluxorComponent

<EditCard>
    <MudContainer Class="mt-3 d-flex flex-column align-center">
        @if (Model.ImageBase64 != null)
        {
            <img class="artist-image edit-image" src="@Model.ImageBase64" />
        }
        else
        {
            <img class="artist-image edit-image" src="@OriginalImageSrc" />
        }

        <MudStack Row="true" Class="my-2">
            <MudButton OnClick="@(() => OnSearch(SearchSource.LastFM))">Search Last.FM</MudButton>
            <MudButton OnClick="@(() => OnSearch(SearchSource.Spotify))">Search Spotify</MudButton>
        </MudStack>
    </MudContainer>

    <MudStack Row="true" Class="my-1">
        <MudTextField MaxLength="255"
                      Label="Image URL"
                      @bind-Value="ImageUrl"
                      For="@(() => ImageUrl)" />

        <MudButton OnClick="@OnUpdateUrl">Update</MudButton>
    </MudStack>
</EditCard>

@code {
    [Inject] public IImageFinder ImageFinder { get; set; }
    [Inject] public IDispatcher Dispatcher { get; set; }

    [Parameter] public ArtistDetailsVM Model { get; set; }

    private string ImageUrl { get; set; }

    private string OriginalImageSrc { get; set; }

    protected override void OnInitialized()
    {
        SubscribeToAction<FetchArtistImageResultAction>(OnArtistImageFetched);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Dispatcher.Dispatch(new FetchArtistImageRequest(Model));
    }

    private void OnArtistImageFetched(FetchArtistImageResultAction action)
    {
        if (action.ArtistId != Model.Id)
            return;

        OriginalImageSrc = action.Result;
    }

    protected void OnSearch(SearchSource source)
    {
        var searchUrl = ImageFinder.GetSearchUrl(Model, source);
        Dispatcher.Dispatch(new NavigationRequest(searchUrl, true));
    }

    protected async Task OnUpdateUrl()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(ImageUrl))
            {
                throw new Exception("No URL entered");
            }

            Model.ImageBase64 = await ImageFinder.GetBase64ArtworkSource(ImageUrl);
        }
        catch (Exception ex)
        {
            Dispatcher.Dispatch(new NotificationErrorRequest("Error loading artwork", ex.Message, ex.StackTrace));
            return;
        }
    }
}
