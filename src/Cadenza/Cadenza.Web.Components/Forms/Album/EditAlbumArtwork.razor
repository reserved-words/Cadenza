
<EditCard>
    <MudContainer Class="mt-3 d-flex flex-column align-center">

        @if (Model.ArtworkBase64 != null)
        {
            <img class="artwork edit-image" src="@Model.ArtworkBase64" />
        }
        else
        {
            <img class="artwork edit-image" src="@OriginalArtworkSrc" />
        }

        <MudStack Row="true" Class="my-2">
            <MudButton OnClick="@OnLoad">Load</MudButton>
            <MudButton OnClick="@OnSearch">Search</MudButton>
        </MudStack>
    </MudContainer>

    <MudStack Row="true" Class="my-1">
        <MudTextField MaxLength="255"
                      Label="Artwork URL"
                      @bind-Value="ArtworkUrl"
                      For="@(() => ArtworkUrl)" />

        <MudButton OnClick="@OnUpdateUrl">Update</MudButton>
    </MudStack>
</EditCard>

@code {
    [Parameter]
    public AlbumDetails Model { get; set; }

    [Inject]
    public IImageFinder ImageFinder { get; set; }

    [Inject]
    public INavigation Navigation { get; set; }

    [Inject]
    public INotificationService Alert { get; set; }

    [Inject]
    public IArtworkFetcher ArtworkFetcher { get; set; }

    private string ArtworkUrl { get; set; }

    private string OriginalArtworkSrc { get; set; }

    protected override void OnParametersSet()
    {
        OriginalArtworkSrc = ArtworkFetcher.GetAlbumArtworkSrc(Model);
    }

    protected async Task OnLoad()
    {
        try
        {
            var artworkUrl = await ImageFinder.GetUrl(Model);

            if (string.IsNullOrWhiteSpace(artworkUrl))
            {
                throw new Exception("No artwork found");
            }

            ArtworkUrl = artworkUrl;

            await OnUpdateUrl();
        }
        catch (Exception ex)
        {
            // Log error
            Alert.Error("Error loading artwork: " + ex.Message);
            Alert.Error("Error loading artwork: " + ex.StackTrace);
        }
    }

    protected async Task OnSearch()
    {
        var searchUrl = ImageFinder.GetSearchUrl(Model);
        await Navigation.OpenNewTab(searchUrl);
    }

    protected async Task OnUpdateUrl()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(ArtworkUrl))
            {
                throw new Exception("No URL entered");
            }

            Model.ArtworkBase64 = await ImageFinder.GetBase64ArtworkSource(ArtworkUrl);
        }
        catch (Exception ex)
        {
            Alert.Error(ex.Message);
            return;
        }
    }
}
