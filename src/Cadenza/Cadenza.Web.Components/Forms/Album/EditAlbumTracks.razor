@using Cadenza.Web.Common.Interfaces.Store;
@using IDialogService = Cadenza.Web.Components.Interfaces.IDialogService;

<EditCard>

    <AppTable Items="@Model">
        <RowTemplate>
            <MudTd Class="td-int">@context.DiscTrackNo()</MudTd>

            <MudHidden Breakpoint="@Breakpoint.Xs" Invert="true">
                <MudTd>
                    <MudText Typo="@Typo.body1">@context.Title</MudText>
                    <MudText Typo="@Typo.body2">@context.ArtistName</MudText>
                </MudTd>
            </MudHidden>

            <MudHidden Breakpoint="@Breakpoint.Xs" Invert="false">
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.ArtistName</MudTd>
            </MudHidden>

            <MudTd Class="td-int">
                <MudIconButton Size="@Size.Small"
                               Icon="@Icons.Material.Filled.Delete"
                               Variant="@Variant.Outlined"
                               OnClick="@(() => OnRemoveTrack(context))">Remove</MudIconButton>
            </MudTd>
        </RowTemplate>
    </AppTable>

</EditCard>

@code {
    [Inject]
    public ICurrentTrackStore Store { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }

    [Inject]
    public IMessenger Messenger { get; set; }

    [Inject]
    public INotificationService Notification { get; set; }

    [Parameter]
    public List<AlbumTrack> Model { get; set; }

    private Guid _trackRemovedSubscriptionId = Guid.Empty;

    protected override void OnInitialized()
    {
        Messenger.Subscribe<TrackRemovedEventArgs>(OnTrackRemoved, out _trackRemovedSubscriptionId);
    }

    protected async Task OnRemoveTrack(AlbumTrack track)
    {
        var currentTrackId = await Store.GetCurrentTrackId();

        if (currentTrackId == track.TrackId)
        {
            Notification.Error("Track cannot be removed while currently playing");
            return;
        }

        var trackToRemove = new TrackToRemove
            {
                Id = track.TrackId,
                Title = track.Title,
                ArtistName = track.ArtistName
            };

        await DialogService.DisplayForm<RemoveTrack, TrackToRemove>(trackToRemove, "Remove Track", false);
    }

    private Task OnTrackRemoved(object sender, TrackRemovedEventArgs args)
    {
        var trackOnDisc = Model.SingleOrDefault(t => t.TrackId == args.TrackId);
        if (trackOnDisc == null)
            return Task.CompletedTask;

        Model.Remove(trackOnDisc);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        if (_trackRemovedSubscriptionId != Guid.Empty)
        {
            Messenger.Unsubscribe<TrackRemovedEventArgs>(_trackRemovedSubscriptionId);
        }
    }
}
