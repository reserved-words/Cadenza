@inherits FluxorComponent

@using Cadenza.State.Store;
@using Cadenza.Web.Common.Interfaces.Store
@using IDialogService = Cadenza.Web.Components.Interfaces.IDialogService

<EditCard>

    <AppTable Items="@Model">
        <RowTemplate>
            <MudTd Class="td-int">@context.DiscTrackNo()</MudTd>

            <MudHidden Breakpoint="@Breakpoint.Xs" Invert="true">
                <MudTd>
                    <MudText Typo="@Typo.body1">@context.Title</MudText>
                    <MudText Typo="@Typo.body2">@context.ArtistName</MudText>
                </MudTd>
            </MudHidden>

            <MudHidden Breakpoint="@Breakpoint.Xs" Invert="false">
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.ArtistName</MudTd>
            </MudHidden>

            <MudTd Class="td-int">
                <MudIconButton Size="@Size.Small"
                               Icon="@Icons.Material.Filled.Delete"
                               Variant="@Variant.Outlined"
                               OnClick="@(() => OnRemoveTrack(context))">Remove</MudIconButton>
            </MudTd>
        </RowTemplate>
    </AppTable>

</EditCard>

@code {
    [Inject] public IDialogService DialogService { get; set; }
    [Inject] public INotificationService Notification { get; set; }
    [Inject] public IState<CurrentTrackState> CurrentTrackState { get; set; }
    [Inject] public IState<TrackRemovalState> TrackRemovalState { get; set; }

    [Parameter]
    public List<AlbumTrack> Model { get; set; }

    protected override void OnInitialized()
    {
        TrackRemovalState.StateChanged += TrackRemovalState_StateChanged;

        base.OnInitialized();
    }

    private void TrackRemovalState_StateChanged(object sender, EventArgs args)
    {
        if (TrackRemovalState.Value.Error != null)
            return;

        var trackOnDisc = Model.SingleOrDefault(t => t.TrackId == TrackRemovalState.Value.LastTrackRemovedId);
        if (trackOnDisc == null)
            return;

        Model.Remove(trackOnDisc);
        StateHasChanged();
    }

    protected async Task OnRemoveTrack(AlbumTrack track)
    {
        var currentTrackId = CurrentTrackState.Value.Track?.Id;
        if (currentTrackId == track.TrackId)
        {
            Notification.Error("Track cannot be removed while currently playing");
            return;
        }

        var trackToRemove = new TrackToRemove
        {
            Id = track.TrackId,
            Title = track.Title,
            ArtistName = track.ArtistName
        };

        await DialogService.DisplayForm<RemoveTrack, TrackToRemove>(trackToRemove, "Remove Track", false);
    }
}
