@inherits FluxorComponent

@using Cadenza.Web.Actions
@using Cadenza.Web.State.Store

@if (IncludeHomeTab)
{
    <MenuItem Icon="@Icons.Material.Filled.Home"
              IconSize="@IconSize"
              ShowLabel="@ShowLabels"
              Label="Home"
              Tab="@Tab.Home"
              OnClickItem="@UpdateActiveTab"
              Class="@MenuItemClass(Tab.Home)"
              Disabled="@IsNavigationDisabled" />
}

<MenuItem Icon="@Icons.Material.Filled.Dashboard"
          IconSize="@IconSize"
          ShowLabel="@ShowLabels"
          Label="Dashboard"
          Tab="@Tab.Dashboard"
          OnClickItem="@UpdateActiveTab"
          Class="@MenuItemClass(Tab.Dashboard)"
          Disabled="@IsNavigationDisabled" />

<MenuItem Icon="@Icons.Material.Filled.PlaylistPlay"
          IconSize="@IconSize"
          ShowLabel="@ShowLabels"
          Label="Playing"
          Tab="@Tab.CurrentTrack"
          OnClickItem="@UpdateActiveTab"
          Class="@MenuItemClass(Tab.CurrentTrack)"
          Disabled="@IsNavigationDisabled" />

<MenuItem Icon="@Icons.Material.Filled.FormatListBulleted"
          IconSize="@IconSize"
          ShowLabel="@ShowLabels"
          Label="Library"
          Tab="@Tab.Library"
          OnClickItem="@UpdateActiveTab"
          Class="@MenuItemClass(Tab.Library)"
          Disabled="@IsNavigationDisabled" />

@if (IncludeSearchTab)
{
    <MenuItem Icon="@Icons.Material.Filled.Search"
              IconSize="@IconSize"
              ShowLabel="@ShowLabels"
              Label="Search"
              Tab="@Tab.Search"
              OnClickItem="@UpdateActiveTab"
              Class="@MenuItemClass(Tab.Search)"
              Disabled="@IsNavigationDisabled" />
}

<MenuItem Icon="@Icons.Material.Filled.Settings"
          IconSize="@IconSize"
          ShowLabel="@ShowLabels"
          Label="Settings"
          Tab="@Tab.Settings"
          OnClickItem="@UpdateActiveTab"
          Class="@MenuItemClass(Tab.Settings)"
          Disabled="@IsNavigationDisabled" />

@if (ActiveTab == Tab.Edit)
{
    <MenuItem Icon="@Icons.Material.Filled.Edit"
              IconSize="@IconSize"
              ShowLabel="@ShowLabels"
              Label="Edit"
              Tab="@Tab.Edit"
              Class="@MenuItemClass(Tab.Edit)" />
}

<MudSpacer />
<Search />

@code {
    [Inject] public IDispatcher Dispatcher { get; set; }
    [Inject] public IState<ViewState> ViewState { get; set; }

    [Parameter] public bool IncludeHomeTab { get; set; }
    [Parameter] public bool IncludeSearchTab { get; set; }
    [Parameter] public bool ShowLabels { get; set; }
    [Parameter] public Size IconSize { get; set; }

    private Tab ActiveTab { get; set; }

    private bool IsNavigationDisabled;

    private Tab DefaultTab => IncludeHomeTab ? Tab.Home : Tab.Dashboard;

    protected override void OnInitialized()
    {
        ViewState.StateChanged += ViewState_StateChanged;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ActiveTab = IncludeHomeTab ? Tab.Home : Tab.Dashboard;
        base.OnParametersSet();
    }

    private void ViewState_StateChanged(object sender, EventArgs args)
    {
        IsNavigationDisabled = ViewState.Value.IsNavigationDisabled;

        ActiveTab = ViewState.Value.CurrentTab == Tab.Default
            ? DefaultTab
            : ViewState.Value.CurrentTab;
    }

    private string MenuItemClass(Tab tab)
    {
        return "cdz-menu " + (ActiveTab == tab ? "cdz-menu-active" : "");
    }

    private void UpdateActiveTab(Tab tab)
    {
        Dispatcher.Dispatch(new ViewTabRequest(tab));
    }
}
