@using Cadenza.State.Interfaces;
@using Cadenza.State.Store;

@inherits FluxorComponent

@typeparam T where T : IConnectionState

<MudContainer Class="mx-0 my-2 pa-0">
    <MudText Typo=@Typo.body1>@Title</MudText>
    <MudText Typo=@Typo.body2>@Message</MudText>
    <MudProgressLinear Indeterminate="@Indeterminate"
                       Value="@Progress"
                       Color="@Color" />
</MudContainer>

@code 
{
    [Inject] public IState<T> ConnectionState { get; set; }

    protected override void OnInitialized()
    {
        ConnectionState.StateChanged += ConnectionState_StateChanged;
        base.OnInitialized();
    }

    private void ConnectionState_StateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }


    private TaskState State => ConnectionState.Value.State;
    private string Title => ConnectionState.Value.Title;
    private string Message => ConnectionState.Value.Message;

    private bool Indeterminate => State == TaskState.Running;
    
    private int Progress => State == TaskState.Errored
        || State == TaskState.Completed
            ? 100 
            : 0;

    private Color Color => State == TaskState.Errored
        ? Color.Error 
        : State == TaskState.Completed
        ? Color.Success 
        : Color.Info;
}