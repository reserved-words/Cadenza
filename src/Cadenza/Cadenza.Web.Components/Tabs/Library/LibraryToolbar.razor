@using Cadenza.Common

@if (_isEditable)
{
    <MudButton StartIcon="@Icons.Material.Filled.Edit"
               Color="@Color.Primary"
               Variant="@Variant.Outlined" 
               OnClick="@OnEdit">Edit</MudButton>
}

<MudButton StartIcon="@Icons.Material.Filled.PlayArrow"
           Color="@Color.Default"
           Variant="@Variant.Outlined"
           OnClick="@OnPlay">Play</MudButton>

@code {
    [Inject] public IDispatcher Dispatcher { get; set; }

    [Parameter] public PlayerItemType Type { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Name { get; set; }

    private LibraryItemType? _editType;

    private bool _isEditable;

    protected override void OnParametersSet()
    {
        _editType = Type switch
        {
            PlayerItemType.Artist => LibraryItemType.Artist,
            PlayerItemType.Album => LibraryItemType.Album,
            PlayerItemType.Track => LibraryItemType.Track,
            _ => null
        };

        _isEditable = _editType != null;
    }

    protected void OnPlay()
    {
        switch (Type)
        {
            case PlayerItemType.Artist:
                Dispatcher.Dispatch(new PlayArtistRequest(int.Parse(Id)));
                break;
            case PlayerItemType.Album:
                Dispatcher.Dispatch(new PlayAlbumRequest(int.Parse(Id), 0));
                break;
            case PlayerItemType.Track:
                Dispatcher.Dispatch(new PlayTrackRequest(int.Parse(Id)));
                break;
            case PlayerItemType.Grouping:
                Dispatcher.Dispatch(new PlayGroupingRequest(Id));
                break;
            case PlayerItemType.Genre:
                Dispatcher.Dispatch(new PlayGenreRequest(Id));
                break;
            case PlayerItemType.Tag:
                Dispatcher.Dispatch(new PlayTagRequest(Id));
                break;
        }
    }

    protected void OnEdit()
    {
        if (!_isEditable)
            return;

        if (!int.TryParse(Id, out int editId))
            return;

        Dispatcher.Dispatch(new ViewEditItemRequest(_editType.Value, editId, Name));
    }
}
