
<MudButtonGroup Color="Color.Dark" Variant="Variant.Filled" Class="ma-0 pa-0">
    <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" OnClick="SkipPrevious" Disabled="@(!CanSkipPrevious)" />
    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" OnClick="Resume" Disabled="@(!CanPlay)" Class="@PlayButtonClass()" />
    <MudIconButton Icon="@Icons.Material.Filled.Pause" OnClick="Pause" Disabled="@(!CanPause)" Class="@PauseButtonClass()" />
    <MudIconButton Icon="@Icons.Material.Filled.SkipNext" OnClick="SkipNext" Disabled="@(!CanSkipNext)" />
</MudButtonGroup>

@code {
    [Inject] public IMessenger Messenger { get; set; }

    [Parameter] public bool IsTrackPopulated { get; set; }
    [Parameter] public bool IsLastTrack { get; set; }

    [Parameter] public Func<Task> OnPause { get; set; }
    [Parameter] public Func<Task> OnResume { get; set; }

    private bool CanSkipNext => IsTrackPopulated && !IsLastTrack;
    private bool CanSkipPrevious => IsTrackPopulated;

    private bool CanPause { get; set; }
    private bool CanPlay { get; set; }

    protected override void OnParametersSet()
    {
        CanPlay = false;
        CanPause = IsTrackPopulated;
    }

    protected async Task Pause()
    {
        CanPlay = true;
        CanPause = false;
        await OnPause();
    }

    protected async Task Resume()
    {
        CanPlay = false;
        CanPause = true;
        await OnResume();
    }

    public async Task SkipNext()
    {
        await Messenger.Send(this, new SkipNextTrackEventArgs());
    }

    public async Task SkipPrevious()
    {
        await Messenger.Send(this, new SkipPreviousTrackEventArgs());
    }

    private string PlayButtonClass()
    {
        return Display(!CanPause);
    }

    private string PauseButtonClass()
    {
        return Display(CanPause);
    }

    private string Display(bool show) => show ? "d-flex" : "d-none";
}