@using Cadenza.Core.App
@using Cadenza.Core.Extensions
@using Cadenza.Core.Updates
@if (Model != null)
{
    <ItemCardHeader Type="@PlayerItemType.Artist"
                    Id="@Model.Id">
        <ChildContent>
            <ActionLink Typo="Typo.h6" Text="@Model.Name" OnClick="@(() => Viewer.ViewArtist(Model.Id))"></ActionLink>

            @if (!TitleOnly)
            {
                <MudText Typo="Typo.body1">@Model.Location()</MudText>
                <ActionLink Typo="Typo.body2" Text="@Model.Grouping.GetDisplayName()" OnClick="@(() => Viewer.ViewGrouping(Model.Grouping))"></ActionLink>
                <ActionLink Typo="Typo.body2" Text="@Model.Genre" OnClick="@(() => Viewer.ViewGenre(Model.Genre))"></ActionLink>
            }

        </ChildContent>
    </ItemCardHeader>
}

@code {
    [Inject]
    public IItemViewer Viewer { get; set; }

    [Inject]
    public IUpdatesConsumer UpdatesConsumer { get; set; }

    [Parameter]
    public ArtistInfo Model { get; set; }

    [Parameter]
    public bool TitleOnly { get; set; }

    protected override void OnInitialized()
    {
        UpdatesConsumer.ArtistUpdated += OnArtistUpdated;
    }

    private async Task OnArtistUpdated(object sender, ArtistUpdatedEventArgs args)
    {
        if (args.Artist.Id != Model.Id)
            return;

        Model = args.Artist;
        StateHasChanged();
    }
}