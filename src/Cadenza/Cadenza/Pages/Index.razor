@page "/"
@using Cadenza.Web.Common.Interfaces.Startup;
@using Cadenza.Web.Core.Coordinators;

@attribute [Authorize] 

<MudTabs KeepPanelsAlive="true" Class="main-tabs" @ref="tabs">

    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">

        <MudTabPanel Text="HOME" ID="@(Tab.Home)">
            <HomeTab />
        </MudTabPanel>
        <MudTabPanel Text="HISTORY" ID="@(Tab.History)">
            <HistoryTab />
        </MudTabPanel>
        <MudTabPanel Text="CURRENT TRACK" ID="@(Tab.CurrentTrack)">
            <CurrentlyPlayingTab />
        </MudTabPanel>
        <MudTabPanel Text="LIBRARY" ID="@(Tab.Library)">
            <LibraryTab />
        </MudTabPanel>
        <MudTabPanel Text="SEARCH" ID="@(Tab.Search)">
            <SearchTab />
        </MudTabPanel>

    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.SmAndDown">

        <MudTabPanel Text="HISTORY" ID="@(Tab.History)">
            <HistoryTab />
        </MudTabPanel>
        <MudTabPanel Text="CURRENT TRACK" ID="@(Tab.CurrentTrack)">
            <CurrentlyPlayingTab />
        </MudTabPanel>
        <MudTabPanel Text="LIBRARY" ID="@(Tab.Library)">
            <LibraryTab />
        </MudTabPanel>
        <MudTabPanel Text="SEARCH" ID="@(Tab.Search)">
            <SearchTab />
        </MudTabPanel>

    </MudHidden>

</MudTabs>

@code {

    [Inject]
    public IMessenger Messenger { get; set; }

    [Inject]
    public StartupCoordinator StartupCoordinator { get; set; }

    [Inject]
    public IStartupService StartupService { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    MudTabs tabs;

    protected override void OnInitialized()
    {
        Messenger.Subscribe<ViewTabEventArgs>(OnViewTab);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!StartupCoordinator.StartedUp)
        {
            await StartupService.Startup();
        }
    }

    private Task OnViewTab(object sender, ViewTabEventArgs args)
    {
        tabs.ActivatePanel(args.Tab);
        return Task.CompletedTask;
    }
}