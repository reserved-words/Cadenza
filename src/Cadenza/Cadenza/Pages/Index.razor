@page "/"

@inherits FluxorComponent

@attribute [Authorize] 

<MudTabs KeepPanelsAlive="true" Class="main-tabs" @ref="tabs">

    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
        <MudTabPanel Text="HOME" ID="@(Tab.Home)">
            <HomeTab />
        </MudTabPanel>
    </MudHidden>

    <MudTabPanel Text="DASHBOARD" ID="@(Tab.Dashboard)">
        <DashboardTab />
    </MudTabPanel>
    <MudTabPanel Text="CURRENT TRACK" ID="@(Tab.CurrentTrack)">
        <CurrentlyPlayingTab />
    </MudTabPanel>
    <MudTabPanel Text="LIBRARY" ID="@(Tab.Library)">
        <LibraryTab />
    </MudTabPanel>
    <MudTabPanel Text="SEARCH" ID="@(Tab.Search)">
        <SearchTab />
    </MudTabPanel>
    <MudTabPanel Text="SEARCH" ID="@(Tab.Search)">
        <SearchTab />
    </MudTabPanel>
    <MudTabPanel Text="EDIT" ID="@(Tab.Edit)">
        <EditTab />
    </MudTabPanel>
    <MudTabPanel Text="SETTINGS" ID="@(Tab.Settings)">
        <SettingsTab />
    </MudTabPanel>

</MudTabs>

@code {

    [Inject] public IDispatcher Dispatcher { get; set; }
    [Inject] public IState<ApplicationState> ApplicationState { get; set; }
    [Inject] public IState<ViewState> ViewState { get; set; }

    MudTabs tabs;

    protected override void OnInitialized()
    {
        ViewState.StateChanged += ViewState_StateChanged;
        base.OnInitialized();
    }

    private void ViewState_StateChanged(object sender, EventArgs args)
    {
        tabs.ActivatePanel(ViewState.Value.Tab);
    }

    protected override void OnParametersSet()
    {
        if (!ApplicationState.Value.Started)
        {
            Dispatcher.Dispatch(new ApplicationStartRequest());
        }
    }
}