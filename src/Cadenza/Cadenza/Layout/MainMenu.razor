@using Cadenza.Web.Common.Interfaces.Startup

<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
    <MudIconButton Icon="@Icons.Material.Filled.Home" OnClick="@Home" Class="@MenuItemClass(Tab.Home, true)"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.History" OnClick="@History" Class="@MenuItemClass(Tab.History, true)"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.BarChart" OnClick="@CurrentTrack" Class="@MenuItemClass(Tab.CurrentTrack, true)" />
    <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="@Library" Class="@MenuItemClass(Tab.Library, true)"></MudIconButton>
    <Search />
</MudHidden>

<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudButton StartIcon="@Icons.Material.Filled.History" OnClick="@History" Class="@MenuItemClass(Tab.History, false)" Size="Size.Large">History</MudButton>
    <MudButton OnClick="@CurrentTrack" Class="@MenuItemClass(Tab.CurrentTrack, false)" Size="Size.Large">
        <CurrentlyPlayingIcon Playing="@IsCurrentlyPlaying" Class="ml-0 mr-3" />
        Playing
    </MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.FormatListBulleted" OnClick="@Library" Class="@MenuItemClass(Tab.Library, false)" Size="Size.Large">Library</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Search" OnClick="@Search" Class="@MenuItemClass(Tab.Search, false)" Size="Size.Large">Search</MudButton>
    <MudSpacer />
    <Search />
</MudHidden>

@code {
    protected override void OnInitialized()
    {
        Messenger.Subscribe<PlayStatusEventArgs>(OnPlayStatusChanged);
        Messenger.Subscribe<ViewItemEventArgs>(OnViewItem);
    }

    [Inject]
    public IMessenger Messenger { get; set; }

    private bool IsCurrentlyPlaying { get; set; }

    private Tab ActiveTab = Tab.History;

    private async Task History()
    {
        await UpdateActiveTab(Tab.History);
    }

    private async Task Home()
    {
        await UpdateActiveTab(Tab.Home);
    }

    private async Task CurrentTrack()
    {
        await UpdateActiveTab(Tab.CurrentTrack);
    }

    private async Task Library()
    {
        await UpdateActiveTab(Tab.Library);
    }

    private async Task Search()
    {
        await UpdateActiveTab(Tab.Search);
    }

    private string MenuItemClass(Tab tab, bool small)
    {
        var mainClass = small ? "cdz-menu-sm" : "cdz-menu";
        return mainClass + " " + (ActiveTab == tab ? "cdz-menu-active" : "");
    }

    private Task OnPlayStatusChanged(object sender, PlayStatusEventArgs args)
    {
        IsCurrentlyPlaying = args.Status != PlayStatus.Stopped;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnViewItem(object sender, ViewItemEventArgs args)
    {
        if (ActiveTab != Tab.Library)
        {
            await UpdateActiveTab(Tab.Library);
        }
    }

    private async Task UpdateActiveTab(Tab tab)
    {
        await Messenger.Send(this, new ViewTabEventArgs(tab));
        ActiveTab = tab;
        StateHasChanged();
    }
}
